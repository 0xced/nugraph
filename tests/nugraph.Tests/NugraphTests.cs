using System;
using System.IO;
using System.Threading.Tasks;
using AwesomeAssertions;
using AwesomeAssertions.Execution;
using NuGet.Common;

namespace nugraph.Tests;

[InheritsTests, ClassDataSource<NugraphGlobalTool>(Shared = SharedType.PerTestSession)]
public sealed class NugraphTestsGlobalTool(NugraphGlobalTool nugraph) : NugraphTests(nugraph);

[InheritsTests, ClassDataSource<NugraphProgram>(Shared = SharedType.PerTestSession)]
public sealed class NugraphTestsProgram(NugraphProgram nugraph) : NugraphTests(nugraph);

public abstract class NugraphTests(Nugraph nugraph)
{
    [Test]
    public async Task Diagnose()
    {
        var result = await nugraph.RunAsync(["--diagnose"]);

        await File.WriteAllTextAsync($"{nugraph.GetType().Name}.diagnostics.txt", result.StdOut);

        using (new AssertionScope())
        {
            result.Should().Match(stdOutPattern: "nugraph:*");
            result.StdOut.Should().NotContain(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
        }
    }

    [Test]
    public async Task Version()
    {
        var result = await nugraph.RunAsync(["--version"]);

        result.Should().Match(stdOutPattern: nugraph.Version);
    }

    [Test]
    public async Task Help()
    {
        var result = await nugraph.RunAsync(["--help"]);

        result.Should().Match(stdOutPattern: "*USAGE:*nugraph*[SOURCE]*");
    }

    [Test]
    public async Task Package_Serilog()
    {
        var result = await nugraph.RunAsync(["Serilog"]);

        result.Should().Match(stdOutPattern:"https://mermaid.live/view#pako:*", stdErrPattern: """
                                Generating dependency graph for Serilog
                                Generating dependency graph for Serilog *
                                """);
    }

    [Test]
    public async Task Package_Serilog_WorkingDirectoryUsingArcadeSdk()
    {
        using var project = new TemporaryProject();
        var workingDirectory = project.File.Directory!.FullName;
        // lang=xml
        const string directoryBuildProps =
            """
            <Project>
              <Import Project="Sdk.props" Sdk="Microsoft.DotNet.Arcade.Sdk" />
            </Project>
            """;
        await File.WriteAllTextAsync(Path.Combine(workingDirectory, "Directory.Build.props"), directoryBuildProps);

        var result = await nugraph.RunAsync(["Serilog"], workingDirectory: workingDirectory);

        result.Should().Match(stdOutPattern:"https://mermaid.live/view#pako:*", stdErrPattern: """
                                Generating dependency graph for Serilog
                                Generating dependency graph for Serilog *
                                """);
    }

    [Test]
    public async Task Package_Serilog_430_net60()
    {
        var result = await nugraph.RunAsync(["Serilog/4.3.0", "--framework", "net6.0"]);

        result.Should().Match(stdOutPattern: "https://mermaid.live/view#pako:*", stdErrPattern: """
                                Generating dependency graph for Serilog 4.3.0
                                Generating dependency graph for Serilog 4.3.0 (net6.0)
                                """)
            .And.UrlHasDiagram("""
                               ---
                               title: Dependency graph of Serilog 4.3.0 (net6.0)
                               ---

                               %% Generated by https://github.com/0xced/nugraph

                               graph LR

                               classDef root stroke-width:4px
                               classDef default fill:aquamarine,stroke:#009061,color:#333333

                               Serilog{{Serilog}}

                               class Serilog root
                               class Serilog default
                               click Serilog "https://www.nuget.org/packages/Serilog/4.3.0" "Serilog 4.3.0"
                               """);
    }

    [Test]
    public async Task Package_DockerRunner_MermaidSvg()
    {
        var result = await nugraph.RunAsync(["DockerRunner", "--format", "mmd.svg"]);

        result.Should().Match(stdOutPattern:"https://mermaid.ink/svg/pako:*", stdErrPattern: """
                                Generating dependency graph for DockerRunner
                                Generating dependency graph for DockerRunner 1.0.0-beta.2 (netstandard2.0)
                                """);
    }

    [Test]
    public async Task Package_DockerRunner_GraphvizSvg()
    {
        var result = await nugraph.RunAsync(["DockerRunner", "--format", "dot.svg"]);

        result.Should().Match(stdOutPattern:"https://kroki.io/graphviz/svg/*", stdErrPattern: """
                                Generating dependency graph for DockerRunner
                                Generating dependency graph for DockerRunner 1.0.0-beta.2 (netstandard2.0)
                                """);
    }

    [Test]
    public async Task Package_DoesNotExist()
    {
        var result = await nugraph.RunAsync(["DoesNotExist"], logLevel: LogLevel.Debug);

        result.Should().Match(66, stdErrPattern: """
                                                 *Retrieving DependencyInfoResource for nuget.org*
                                                 *Resolving DoesNotExist with NuGet.Protocol.DependencyInfoResourceV3*
                                                 *Package DoesNotExist was not found*nuget.org [https://api.nuget.org/v3/index.json]*
                                                 """);
    }

    [Test]
    public async Task Project_nugraph_WorkingDirectory()
    {
        var result = await nugraph.RunAsync(["-m", "gv"], workingDirectory: RepositoryDirectories.GetPath("src", "nugraph"));

        result.Should().Match(stdOutPattern: "https://edotor.net/#deflate:*", stdErrPattern: "Generating dependency graph for nugraph");
    }

    [Test]
    public async Task Project_nugraph_ExplicitDirectory()
    {
        var result = await nugraph.RunAsync([RepositoryDirectories.GetPath("src", "nugraph"), "-m", "graphviz"]);

        result.Should().Match(stdOutPattern: "https://edotor.net/#deflate:*", stdErrPattern: "Generating dependency graph for nugraph");
    }

    [Test]
    public async Task Project_mmd_ProjectFile()
    {
        var result = await nugraph.RunAsync([RepositoryDirectories.GetPath("tools", "mmd", "mmd.csproj"), "-m", "dot"]);

        result.Should().Match(stdOutPattern: "https://edotor.net/#deflate:*", stdErrPattern: "Generating dependency graph for mmd.csproj")
            .And.UrlHasDiagram("""
                               # Generated by https://github.com/0xced/nugraph
                               
                               digraph
                               {
                                 rankdir=LR
                                 label="Dependency graph of mmd"
                               
                                 node [ fontname = "Segoe UI, sans-serif", shape = box, style = filled, fillcolor = aquamarine, color = "#009061", fontcolor = "#333333" ]
                               
                               
                                 "Markdig" [ shape = hexagon, penwidth = 4, href="https://www.nuget.org/packages/Markdig/0.41.3" ]
                                 "Microsoft.Bcl.Memory" [ shape = hexagon, penwidth = 4, href="https://www.nuget.org/packages/Microsoft.Bcl.Memory/9.0.6" ]
                                 "MinVer" [ shape = hexagon, penwidth = 4, href="https://www.nuget.org/packages/MinVer/6.0.0" ]
                               }
                               """);
    }

    [Test]
    public async Task Project_SolutionFile()
    {
        var result = await nugraph.RunAsync([], workingDirectory: RepositoryDirectories.GetPath());

        result.Should().Match(65, stdErrPattern: """
                                                 Generating dependency graph for nugraph
                                                 Solution files are not supported.
                                                 Please run nugraph in a directory that contains a single project file or pass an explicit project file as the first argument.
                                                 """);
    }

    [Test]
    public async Task Project_NoProject()
    {
        var result = await nugraph.RunAsync([], workingDirectory: RepositoryDirectories.GetPath("resources"));

        result.Should().Match(65, stdErrPattern: """
                                                 Generating dependency graph for resources
                                                 The current working directory does not contain a project file.
                                                 Please run nugraph in a directory that contains a single project file or pass an explicit project file as the first argument.
                                                 """);
    }

    [Test]
    public async Task BadUrlOption()
    {
        var result = await nugraph.RunAsync(["--url", "bad"]);

        result.Should().Match(64, stdErrPattern: """
                                                 Failed to convert 'bad' to UrlAction. Valid values are 'none', 'open', 'print'
                                                 DESCRIPTION:*
                                                 *USAGE:*nugraph*[SOURCE]*
                                                 """);
    }
}