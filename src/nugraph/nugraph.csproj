<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup Label="Compiling">
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <AnalysisMode>All</AnalysisMode>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <PropertyGroup Label="Packaging">
    <PackAsTool>true</PackAsTool>
    <ToolCommandName>nugraph</ToolCommandName>
    <RollForward>LatestMajor</RollForward>
  </PropertyGroup>

  <PropertyGroup Label="Packaging Metadata">
    <Authors>Cédric Luthi</Authors>
    <Copyright>Copyright © Cédric Luthi</Copyright>
    <Description>Command-line tool for creating visual dependency graphs of NuGet packages and .NET projects</Description>
    <PackageIcon>icon.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>nuget project package dependency dependencies graph mermaid graphviz cli</PackageTags>
    <PackageProjectUrl>https://github.com/0xced/nugraph</PackageProjectUrl>
    <PackageReleaseNotes>https://github.com/0xced/nugraph/blob/main/CHANGELOG.md</PackageReleaseNotes>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
  </PropertyGroup>

  <ItemGroup Label="Packaging Metadata">
    <None Include="../../resources/icon.png" Pack="true" PackagePath="" Visible="false" />
    <None Include="../../README.md" Pack="true" PackagePath="" />
  </ItemGroup>

  <PropertyGroup Label="Restoring">
    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
    <!-- https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/#how-does-nuget-use-the-lock-file -->
    <RestoreLockedMode Condition="$(ContinuousIntegrationBuild) == 'true'">true</RestoreLockedMode>
  </PropertyGroup>

  <ItemGroup Label="Restoring">
    <None Update="packages.lock.json" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="CliWrap" Version="3.9.0" />
    <PackageReference Include="Espresso3389.HttpStream" Version="2.0.68" />
    <PackageReference Include="Microsoft.Bcl.Memory" Version="9.0.9" />
    <!-- 17.11.31 is the latest version that supports .NET 8, starting with version 17.12.6, only .NET 9 is supported -->
    <PackageReference Include="Microsoft.Build" Version="[17.11.31,17.12.6)" ExcludeAssets="runtime" />
    <PackageReference Include="Microsoft.Build.Locator" Version="1.9.1" />
    <PackageReference Include="MinVer" Version="6.0.0" PrivateAssets="all" />
    <PackageReference Include="NuGet.ProjectModel" Version="6.14.0" />
    <PackageReference Include="OneOf" Version="3.0.271" />
    <PackageReference Include="OneOf.SourceGenerator" Version="3.0.271" PrivateAssets="all" />
    <PackageReference Include="Spectre.Console.Analyzer" Version="1.0.0" PrivateAssets="all" />
    <PackageReference Include="Spectre.Console.Cli" Version="0.51.1" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="..\Chisel\src\Chisel\*.cs" LinkBase="Chisel" />
    <Compile Remove="..\Chisel\src\Chisel\Chisel.cs" />
    <Compile Remove="..\Chisel\src\Chisel\SdkAssemblyResolver.cs" />
  </ItemGroup>

  <PropertyGroup Label="To investigate if it makes sense for a CLI app">
    <!-- CA2007: Consider calling ConfigureAwait on the awaited task -->
    <NoWarn>$(NoWarn);CA2007</NoWarn>
  </PropertyGroup>

  <PropertyGroup Label="Exceptions rules that don't matter since they are only consumed internally">
    <!-- CA1064 : Exceptions should be public -->
    <NoWarn>$(NoWarn);CA1064</NoWarn>
    <!-- CA1032 : Implement standard exception constructors -->
    <NoWarn>$(NoWarn);CA1032</NoWarn>
  </PropertyGroup>

  <PropertyGroup Label="From Chisel source code which targets .NET Standard 2.0">
    <!-- CA1307 : 'string.IndexOf(char)' has a method overload that takes a 'StringComparison' parameter -->
    <NoWarn>$(NoWarn);CA1307</NoWarn>
    <!-- CA1310 : The behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings -->
    <NoWarn>$(NoWarn);CA1310</NoWarn>
    <!-- CA1866 : Use 'string.StartsWith(char)' instead of 'string.StartsWith(string)' when you have a string with a single char -->
    <NoWarn>$(NoWarn);CA1866</NoWarn>
    <!-- CA1867 : Use 'string.EndsWith(char)' instead of 'string.EndsWith(string)' when you have a string with a single char -->
    <NoWarn>$(NoWarn);CA1867</NoWarn>
  </PropertyGroup>

</Project>
